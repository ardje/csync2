####################
update.c
--------------------

        SQL("Remove dirty-file entry.",
                "DELETE FROM dirty WHERE filename = '%s' "
                "AND peername = '%s'", url_encode(filename),
                url_encode(peername));

csdbDeleteDirtyFilename_Peername_(const char *, const char *)


--------------------
        SQL_BEGIN("Get files for host from dirty table",
                "SELECT filename, myname, force FROM dirty WHERE peername = '%s' "
                "ORDER by filename ASC%s", url_encode(peername),limit_work)
        {
                const char *filename = url_decode(SQL_V(0));
                int i, use_this = patnum == 0;
                for (i=0; i<patnum && !use_this; i++)
                        if ( compare_files(filename, patlist[i], recursive) ) use_this = 1;
                if (use_this)
                        textlist_add2(&tl, filename, url_decode(SQL_V(1)), atoi(SQL_V(2)));
        } SQL_END;
         * The SQL statement above creates a linked list. Due to the
         * way the linked list is created, it has the reversed order
         * of the sql output. This order is good for removing stuff
         * (deep entries first) but we need to use the original order
         * for adding things.


csdbGetDirtyFilesPeername_Maxamount_(const char *, int limit)
--------------------
        SQL_BEGIN("Get hosts from dirty table",
                "SELECT peername FROM dirty GROUP BY peername ORDER BY random()")
        {
                textlist_add(&tl, url_decode(SQL_V(0)), 0);
        } SQL_END;

csdbGetPeers() -> list
select random from list.
--------------------
csync_insynctest
        SQL_BEGIN("DB Dump - File",
                "SELECT checktxt, filename FROM file %s%s%s ORDER BY filename",
                        filename ? "WHERE filename = '" : "",
                        filename ? url_encode(filename) : "",
                        filename ? "'" : "")
        {
 < Do  a lot of stuff >		
        } SQL_END;

--------------------
csync_remove_old
        SQL_BEGIN("Query dirty DB",
                  "SELECT filename, myname, peername FROM dirty")
                while ((g=csync_find_next(g, filename)) != 0) {

        } SQL_END;

                SQL("Remove old file from dirty db",
                    "DELETE FROM dirty WHERE filename = '%s' AND peername = '%s'", t->value, t->value2);

--------------------
        SQL_BEGIN("Query file DB",
                  "SELECT filename FROM file")
        {
                if (!csync_find_next(0, url_decode(SQL_V(0))))
                        textlist_add(&tl, SQL_V(0), 0);
        } SQL_END;
--------------------
                SQL("Remove old file from file db",
                    "DELETE FROM file WHERE filename = '%s'", t->value);
csdbFileDeleteFilename_(const char *)
--------------------
####################
check.c
--------------------
        SQL("Adding Hint",
                "INSERT INTO hint (filename, recursive) "
                "VALUES ('%s', %d)", url_encode(file), recursive);
csdbHintAddFilename_Recursive_()
--------------------
                        SQL("Marking File Dirty",
                                "%s INTO dirty (filename, force, myname, peername) "
                                "VALUES ('%s', %s, '%s', '%s')",
                                csync_new_force ? "REPLACE" : "INSERT",
                                url_encode(file),
                                csync_new_force ? "1" : "0",
                                url_encode(pl[pl_idx].myname),
                                url_encode(pl[pl_idx].peername));
csdbDirtyAddFilename_Myname_Peername_Force_()
--------------------
csync_check_del
                if ( !strcmp(file, "/") )
                        asprintf(&where_rec, "or 1");
                else
                        asprintf(&where_rec, "UNION ALL SELECT filename from file where filename > '%s/' "
                                        "and filename < '%s0'",
                                        url_encode(file), url_encode(file));

        SQL_BEGIN("Checking for removed files",
                        "SELECT filename from file where "
                        "filename = '%s' %s ORDER BY filename", url_encode(file), where_rec)
        {
                const char *filename = url_decode(SQL_V(0));
                if ( lstat_strict(prefixsubst(filename), &st) != 0 || csync_check_pure(filename) )
                        textlist_add(&tl, filename, 0);
        } SQL_END;
--------------------
csync_check_mod
                SQL_BEGIN("Checking File",
                        "SELECT checktxt FROM file WHERE "
                        "filename = '%s'", url_encode(file))
                {
                        if ( !csync_cmpchecktxt(checktxt,
                                                url_decode(SQL_V(0))) ) {
                                csync_debug(2, "File has changed: %s\n", file);
                                this_is_dirty = 1;
                        }
                } SQL_FIN {
                        if ( SQL_COUNT == 0 ) {
                                csync_debug(2, "New file: %s\n", file);
                                this_is_dirty = 1;
                        }
                } SQL_END;
                        SQL("Adding or updating file entry",
                            "INSERT INTO file (filename, checktxt) "
                            "VALUES ('%s', '%s')",
                            url_encode(file), url_encode(checktxt));
                        if (!init_run) csync_mark(file, 0, 0);



================================================================================
Daemon mode db server
-fork
-open databases
-accept/work loop
  - accept->accept new fd
  - wait on fd
  - if fd readable: read instruction

proto:
<type><size>
SQL_BEGIN <query>
SQL_NEXT
SQL_END 
SQL_PLAIN
RSQL_ROW <nr of columns> <column1> <column2> ... <column n>
RSQL_STATUS <nr of rows> <error>
